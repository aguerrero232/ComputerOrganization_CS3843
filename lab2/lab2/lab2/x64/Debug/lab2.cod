; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__376EBCA0_winioctl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2CCBBE23_propidl@h DB 01H
__AD360DAF_oleauto@h DB 01H
__0396F1A5_stralign@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__D97E7264_lab2@cpp DB 01H
msvcjmc	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BL@JCLIBLPF@usum?5?$DN?5?$CF02X?0?5ssum?5?$DN?5?$CF02X?6?6@ ; `string'
PUBLIC	??_C@_0BL@OCJLDFEN@usum?5?$DN?5?$CFu?0?5and?5ssum?5?$DN?5?$CFd?6?6@ ; `string'
PUBLIC	??_C@_0EB@OALBKDEI@What?5if?5we?5tell?5the?5printf?5to?5i@ ; `string'
PUBLIC	??_C@_0EG@BIGMIMDD@Zero?9Extended?5the?5unsigned?5resu@ ; `string'
PUBLIC	??_C@_0CN@OCMHICHO@usum32?5?$DN?5?$CFu?5?$CI0x?$CF08X?$CJ?0?5ssum32?5?$DN?5@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
EXTRN	system:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+188
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN9
	DD	imagerel $LN9+416
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OCMHICHO@usum32?5?$DN?5?$CFu?5?$CI0x?$CF08X?$CJ?0?5ssum32?5?$DN?5@
CONST	SEGMENT
??_C@_0CN@OCMHICHO@usum32?5?$DN?5?$CFu?5?$CI0x?$CF08X?$CJ?0?5ssum32?5?$DN?5@ DB 'u'
	DB	'sum32 = %u (0x%08X), ssum32 = %d (0x%08X)', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BIGMIMDD@Zero?9Extended?5the?5unsigned?5resu@
CONST	SEGMENT
??_C@_0EG@BIGMIMDD@Zero?9Extended?5the?5unsigned?5resu@ DB 'Zero-Extended'
	DB	' the unsigned result, Sign-Extended the signed result.', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OALBKDEI@What?5if?5we?5tell?5the?5printf?5to?5i@
CONST	SEGMENT
??_C@_0EB@OALBKDEI@What?5if?5we?5tell?5the?5printf?5to?5i@ DB 'What if we'
	DB	' tell the printf to interpret the results backwards?', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCJLDFEN@usum?5?$DN?5?$CFu?0?5and?5ssum?5?$DN?5?$CFd?6?6@
CONST	SEGMENT
??_C@_0BL@OCJLDFEN@usum?5?$DN?5?$CFu?0?5and?5ssum?5?$DN?5?$CFd?6?6@ DB 'u'
	DB	'sum = %u, and ssum = %d', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JCLIBLPF@usum?5?$DN?5?$CF02X?0?5ssum?5?$DN?5?$CF02X?6?6@
CONST	SEGMENT
??_C@_0BL@JCLIBLPF@usum?5?$DN?5?$CF02X?0?5ssum?5?$DN?5?$CF02X?6?6@ DB 'us'
	DB	'um = %02X, ssum = %02X', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035052d01H
	DD	01123317H
	DD	0700b0047H
	DD	0500aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 073H
	DB	073H
	DB	075H
	DB	06dH
	DB	00H
	ORG $+3
main$rtcName$1 DB 075H
	DB	073H
	DB	075H
	DB	06dH
	DB	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Ariel_Guerrero\Desktop\Fall2020\Comp Org\Lab2\lab2\lab2\lab2.cpp
;	COMDAT main
_TEXT	SEGMENT
ux$ = 4
uy$ = 36
usum$ = 68
sx$ = 100
sy$ = 132
ssum$ = 164
usum32$ = 196
ssum32$ = 228
$T3 = 452
$T4 = 484
argc$ = 544
argv$ = 552
main	PROC						; COMDAT

; 13   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR [rsp+600]
  0002d	c6 85 c4 01 00
	00 00		 mov	 BYTE PTR $T3[rbp], 0
  00034	c6 85 e4 01 00
	00 00		 mov	 BYTE PTR $T4[rbp], 0
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D97E7264_lab2@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 14   : 	unsigned char ux, uy, usum;
; 15   : 	char sx, sy, ssum;
; 16   : 	unsigned int usum32 = 0;

  00047	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR usum32$[rbp], 0

; 17   : 	int ssum32 = 0;

  00051	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ssum32$[rbp], 0

; 18   : 
; 19   : 	ux = -5;  uy = 240;

  0005b	c6 45 04 fb	 mov	 BYTE PTR ux$[rbp], 251	; 000000fbH
  0005f	c6 45 24 f0	 mov	 BYTE PTR uy$[rbp], 240	; 000000f0H

; 20   : 	sx = ux;  sy = uy;

  00063	0f b6 45 04	 movzx	 eax, BYTE PTR ux$[rbp]
  00067	88 45 64	 mov	 BYTE PTR sx$[rbp], al
  0006a	0f b6 45 24	 movzx	 eax, BYTE PTR uy$[rbp]
  0006e	88 85 84 00 00
	00		 mov	 BYTE PTR sy$[rbp], al

; 21   : 
; 22   : 	/*__asm
; 23   : 	{
; 24   : 		xor eax, eax	// zero the registers
; 25   : 		xor ebx, ebx
; 26   : 
; 27   : 		mov al, ux	// put the value of ux into al
; 28   : 		mov bl, uy	// put the value of uy into bl
; 29   : 		add al, bl	// al = al + bl
; 30   : 
; 31   : 		mov usum, al
; 32   : 		movzx ecx, al	// zero extend the result
; 33   : 		mov usum32, ecx
; 34   : 
; 35   : 		mov ah, sx	// put the value in ux into ah
; 36   : 		mov bh, sy	// put the value in uy into bh
; 37   : 		add ah, bh	// ah = ah + bh
; 38   : 		mov ssum, ah
; 39   : 
; 40   : 		movsx edx, ah
; 41   : 		mov ssum32, edx
; 42   : 	}
; 43   : 	*/
; 44   : 	printf("usum = %02X, ssum = %02X\n\n", (unsigned char)usum, (char)ssum);

  00074	80 bd c4 01 00
	00 00		 cmp	 BYTE PTR $T3[rbp], 0
  0007b	75 0c		 jne	 SHORT $LN3@main
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00084	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN3@main:
  00089	80 bd e4 01 00
	00 00		 cmp	 BYTE PTR $T4[rbp], 0
  00090	75 0c		 jne	 SHORT $LN4@main
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$1
  00099	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN4@main:
  0009e	0f be 85 a4 00
	00 00		 movsx	 eax, BYTE PTR ssum$[rbp]
  000a5	0f b6 4d 44	 movzx	 ecx, BYTE PTR usum$[rbp]
  000a9	44 8b c0	 mov	 r8d, eax
  000ac	8b d1		 mov	 edx, ecx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@JCLIBLPF@usum?5?$DN?5?$CF02X?0?5ssum?5?$DN?5?$CF02X?6?6@
  000b5	e8 00 00 00 00	 call	 printf

; 45   : 	printf("usum = %u, and ssum = %d\n\n", usum, ssum);

  000ba	80 bd c4 01 00
	00 00		 cmp	 BYTE PTR $T3[rbp], 0
  000c1	75 0c		 jne	 SHORT $LN5@main
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  000ca	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN5@main:
  000cf	80 bd e4 01 00
	00 00		 cmp	 BYTE PTR $T4[rbp], 0
  000d6	75 0c		 jne	 SHORT $LN6@main
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$1
  000df	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN6@main:
  000e4	0f be 85 a4 00
	00 00		 movsx	 eax, BYTE PTR ssum$[rbp]
  000eb	0f b6 4d 44	 movzx	 ecx, BYTE PTR usum$[rbp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b d1		 mov	 edx, ecx
  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OCJLDFEN@usum?5?$DN?5?$CFu?0?5and?5ssum?5?$DN?5?$CFd?6?6@
  000fb	e8 00 00 00 00	 call	 printf

; 46   : 	printf("What if we tell the printf to interpret the results backwards?\n\n");

  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@OALBKDEI@What?5if?5we?5tell?5the?5printf?5to?5i@
  00107	e8 00 00 00 00	 call	 printf

; 47   : 	printf("usum = %u, and ssum = %d\n\n", (unsigned char)ssum, (char)usum);

  0010c	80 bd e4 01 00
	00 00		 cmp	 BYTE PTR $T4[rbp], 0
  00113	75 0c		 jne	 SHORT $LN7@main
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$1
  0011c	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN7@main:
  00121	80 bd c4 01 00
	00 00		 cmp	 BYTE PTR $T3[rbp], 0
  00128	75 0c		 jne	 SHORT $LN8@main
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00131	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN8@main:
  00136	0f be 45 44	 movsx	 eax, BYTE PTR usum$[rbp]
  0013a	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR ssum$[rbp]
  00141	44 8b c0	 mov	 r8d, eax
  00144	8b d1		 mov	 edx, ecx
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OCJLDFEN@usum?5?$DN?5?$CFu?0?5and?5ssum?5?$DN?5?$CFd?6?6@
  0014d	e8 00 00 00 00	 call	 printf

; 48   : 	printf("Zero-Extended the unsigned result, Sign-Extended the signed result.\n\n");

  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EG@BIGMIMDD@Zero?9Extended?5the?5unsigned?5resu@
  00159	e8 00 00 00 00	 call	 printf

; 49   : 	printf("usum32 = %u (0x%08X), ssum32 = %d (0x%08X)\n\n", usum32, usum32, ssum32, ssum32);

  0015e	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR ssum32$[rbp]
  00164	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00168	44 8b 8d e4 00
	00 00		 mov	 r9d, DWORD PTR ssum32$[rbp]
  0016f	44 8b 85 c4 00
	00 00		 mov	 r8d, DWORD PTR usum32$[rbp]
  00176	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR usum32$[rbp]
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@OCMHICHO@usum32?5?$DN?5?$CFu?5?$CI0x?$CF08X?$CJ?0?5ssum32?5?$DN?5@
  00183	e8 00 00 00 00	 call	 printf

; 50   : 
; 51   : 	system("pause");

  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PDJBBECF@pause@
  0018f	e8 00 00 00 00	 call	 system

; 52   : 	return 0;

  00194	33 c0		 xor	 eax, eax

; 53   : } // main

  00196	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  0019d	5f		 pop	 rdi
  0019e	5d		 pop	 rbp
  0019f	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Format$ = 320
printf	PROC						; COMDAT

; 954  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AD6A91B7_stdio@h
  00051	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00056	48 8d 85 48 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  0005d	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00061	b9 01 00 00 00	 mov	 ecx, 1
  00066	e8 00 00 00 00	 call	 __acrt_iob_func
  0006b	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  0006f	45 33 c0	 xor	 r8d, r8d
  00072	48 8b 95 40 01
	00 00		 mov	 rdx, QWORD PTR _Format$[rbp]
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 _vfprintf_l
  00081	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 959  :         __crt_va_end(_ArgList);

  00084	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 960  :         return _Result;

  0008c	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 961  :     }

  0008f	8b f8		 mov	 edi, eax
  00091	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  0009c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a1	8b c7		 mov	 eax, edi
  000a3	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000aa	48 33 cd	 xor	 rcx, rbp
  000ad	e8 00 00 00 00	 call	 __security_check_cookie
  000b2	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000b9	5f		 pop	 rdi
  000ba	5d		 pop	 rbp
  000bb	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AD6A91B7_stdio@h
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00045	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0004a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _ArgList$[rbp]
  00051	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00056	4c 8b 8d f0 00
	00 00		 mov	 r9, QWORD PTR _Locale$[rbp]
  0005d	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  00064	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR _Stream$[rbp]
  0006b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0006e	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 644  :     }

  00073	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
